name: 'Generate terraform plan'

on:
  # push:
  pull_request:
    types: [opened, reopened]

jobs:

  create-terraform-plan:
    name: 'create-terraform-plan-(${{ github.base_ref }})'
    runs-on: 'ubuntu-latest'
    # runs-on: [self-hosted, Linux]
    strategy:
      matrix:
        env:
            - dev
            # - prod
            # - stage    

    defaults:
      run:
        shell: bash
        # working-directory: "terraform/${{matrix.env}}"

    steps:         
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.0
        terraform_wrapper: false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      
    - name: Get PR ID
      id: pr-id
      env:
        GITHUB_REF: ${{ github.ref }}
      run: |
        PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
        echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT       

    - name: Terraform Plan
      id: plan
      shell: bash
      env:
        TF_VAR_github_token: ${{ secrets.TOKEN_GITHUB_TERRAFORM }}
        TF_LOG: INFO
      run: |
        echo 'plan<<EOF' >> $GITHUB_OUTPUT
        terraform plan -no-color -var-file="environments/${{matrix.env}}.tfvar" -out=${{ steps.pr-id.outputs.PR_NUMBER }}-tf-plan-${{matrix.env}} >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT

    # Save the plan to the pull request as a comment for review
    - name: Update PR
      uses: actions/github-script@v7
      id: plan-comment
      with:
        github-token: ${{ secrets.TOKEN_GITHUB_TERRAFORM }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: ${{ steps.pr-id.outputs.PR_NUMBER }},
          });
          const botComment = comments.find(comment => {
            return comment.body.includes("Terraform Plan Output - ${{matrix.env}}") && comment.body.includes("No changes. Your infrastructure matches the configuration.")
          });

          // 2. Delete previous comment so PR timeline makes sense
          if (botComment) {           
            github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              });
          }
          
          // 3. Post this plan
          const plan_output = `#### Terraform Plan Output - ${{matrix.env}}
          \`\`\`
          Plan: ${{steps.plan.outputs.plan }} 
          \`\`\`
          `;
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: ${{ steps.pr-id.outputs.PR_NUMBER }},
            body: plan_output
          }); 
